import streamlit as st
import os
import base64
import locale
import uuid
from passlib.hash import bcrypt
from streamlit_authenticator import Authenticate
import pandas as pd
import io
import math
import datetime
from fpdf import FPDF
from num2words import num2words

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets –¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å—á—ë—Ç–æ–≤
from google_sheets_db import save_calculation, load_calculation, connect_to_sheets

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ supplier_search.py
from supplier_search import run_supplier_search

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Margin Calculator", page_icon="üí∞")

# -------------------------
# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
# -------------------------
credentials = {
    "usernames": {
        "zveat": {
            "name": "John Doe",
            "password": bcrypt.hash("2097")  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        },
        "jane": {
            "name": "Jane Doe",
            "password": bcrypt.hash("456")  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        }
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
authenticator = Authenticate(
    credentials,
    cookie_name="margin_calculator",
    key="random_key",
    cookie_expiry_days=30
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
name, authentication_status, username = authenticator.login("–í—Ö–æ–¥ –≤ —Å–µ—Ä–≤–∏—Å", location='main')

if authentication_status:
    st.session_state["authenticated"] = True
    st.session_state["user"] = username
elif authentication_status is False:
    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    st.stop()
elif authentication_status is None:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
    st.stop()

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ st.session_state —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False
if "user" not in st.session_state:
    st.session_state["user"] = ""

# -------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
# -------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
logo_path = os.path.join(os.path.dirname(__file__), "assets", "Logo.png")
with open(logo_path, "rb") as f:
    data = f.read()
encoded_logo = base64.b64encode(data).decode()
logo_src = f"data:image/png;base64,{encoded_logo}"

# HTML-–±–ª–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
html_block = f"""
<style>
  .responsive-header {{
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 0px;
  }}
  .responsive-header img {{
    max-width: 200px;
    width: 100%;
    height: auto;
    margin-right: 20px;
  }}
  .responsive-header h2 {{
    margin: 0;
    font-size: 25px;
  }}
  @media (max-width: 480px) {{
    .responsive-header img {{
      max-width: 150px;
      margin-right: 10px;
    }}
    .responsive-header h2 {{
      font-size: 20px;
      text-align: center;
    }}
  }}
</style>
<div class="responsive-header">
  <img src="{logo_src}" alt="Logo" />
  <h2>
    <span style="color:#1a535c;">–°–ï–†–í–ò–° –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–´</span>
  </h2>
</div>
"""
st.markdown(html_block, unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_TIME, '')


###############################################################################
#                         –ë–õ–û–ö 1: –ö–û–î –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
###############################################################################
def run_logistics_service():
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ (CSS) –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    st.markdown(
        """
        <style>
        /* –ó–∞–¥–∞—ë–º –¥–ª—è .block-container –∂–µ–ª–∞–µ–º—É—é —à–∏—Ä–∏–Ω—É –∏ –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ 
           (–º–æ–∂–µ—Ç–µ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –ø–æ–¥ —Å–µ–±—è) */
        .block-container {
            max-width: 750px !important; /* –ñ–µ–ª–∞–µ–º–∞—è —à–∏—Ä–∏–Ω–∞ */
            margin-left: 20px !important; /* –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        body {
            background-color: #f1c40f;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ */
        div[data-testid="stNumberInput"] input,
        div[data-testid="stTextInput"] input,
        div[data-testid="stSelectbox"] select {
             border: 1px solid #ccc !important;
             border-radius: 5px !important;
             padding: 8px !important;
             font-size: 14px !important;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
        div.stButton > button {
             background-color: #656dff;
             color: #FFFFFF;
             border: none;
             border-radius: 4px;
             padding: 2px 8px;
             font-size: 6px;
             cursor: pointer;
             transition: background-color 0.3s ease;
        }
        div.stButton > button:hover {
             background-color: #94db00;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫
    city_data = [
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–õ–µ–≥–∫–æ–≤–∞—è –º–∞—à–∏–Ω–∞",    "–í–µ—Å –≥—Ä—É–∑–∞": 40,   "–î–ª–∏–Ω–Ω–∞ –≥—Ä—É–∑–∞": 2,  "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "4000-8000"},
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–ì–∞–∑–µ–ª—å",             "–í–µ—Å –≥—Ä—É–∑–∞": 300,  "–î–ª–∏–Ω–Ω–∞ –≥—Ä—É–∑–∞": 3,  "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "4000-12000"},
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–î–ª–∏–Ω–Ω–æ–ºer/–±–æ—Ä—Ç–æ–≤–æ–π", "–í–µ—Å –≥—Ä—É–∑–∞": 1000, "–î–ª–∏–Ω–Ω–∞ –≥—Ä—É–∑–∞": 12, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "30000-35000"},
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–ì–∞–∑–µ–ª—å –ë–æ—Ä—Ç–æ–≤–∞—è",    "–í–µ—Å –≥—Ä—É–∑–∞": 2000, "–î–ª–∏–Ω–Ω–∞ –≥—Ä—É–∑–∞": 4,  "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "10000-20000"},
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–ë–æ—Ä—Ç–æ–≤–æ–π –≥—Ä—É–∑–æ–≤–∏–∫",  "–í–µ—Å –≥—Ä—É–∑–∞": 6000, "–î–ª–∏–Ωna –≥—Ä—É–∑–∞": 7,  "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "20000-30000"},
        {"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "–§—É—Ä–∞",               "–í–µ—Å –≥—Ä—É–∑–∞": 23000,"–î–ª–∏–Ωna –≥—Ä—Éza": 12, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏": "50000-60000"}
    ]

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫
    intercity_data = {
        "–ê–ª–º–∞—Ç—ã-A—Å—Ç–∞–Ω–∞": 500000,
        "–ê–ª–º–∞—Ç—ã-–®—ã–º–∫–µ–Ω—Ç": 300000,
        "–ê–ª–º–∞—Ç—ã-A–∫—Ç–∞u": 1200000,
        "–ê–ª–º–∞—Ç—ã-A—Ç—ã—Ä–∞u": 800000,
        "–ê–ª–º–∞—Ç—ã-–≥–æ—Ä–æ–¥–∞1": 1,
        "–ê–ª–º–∞—Ç—ã-–≥–æ—Ä–æ–¥–∞2": 1,
        "–ê–ª–º–∞—Ç—ã-–≥–æ—Ä–æ–¥–∞3": 1
    }

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", ["–ü–æ –≥–æ—Ä–æ–¥—É", "–ú–µ–∂–≥–æ—Ä–æ–¥"])

    if delivery_type == "–ü–æ –≥–æ—Ä–æ–¥—É":
        weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=0.0, step=0.1, value=0.0)
        length = st.number_input("–î–ª–∏–Ω–∞ (–º) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", min_value=0.0, step=0.1, value=0.0)

        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
            if weight <= 0:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞!")
            else:
                length_val = None if length <= 0 else length
                suitable_options = [
                    entry for entry in city_data
                    if weight <= entry["–í–µ—Å –≥—Ä—É–∑–∞"] and (length_val is None or length_val <= entry["–î–ª–∏–Ω–Ω–∞ –≥—Ä—É–∑–∞"])
                ]
                if not suitable_options:
                    st.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                else:
                    suitable_options.sort(key=lambda x: int(x["–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"].split('-')[0]))
                    best_option = suitable_options[0]
                    alternative_option = suitable_options[1] if len(suitable_options) > 1 else None
                    
                    st.markdown(
                        f"**–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:**<br>**{best_option['–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞']}** "
                        f"{best_option['–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏']} —Ç–≥",
                        unsafe_allow_html=True
                    )
                    if alternative_option:
                        st.markdown(
                            f"**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:**<br>**{alternative_option['–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞']}** "
                            f"{alternative_option['–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏']} —Ç–≥",
                            unsafe_allow_html=True
                        )

    elif delivery_type == "–ú–µ–∂–≥–æ—Ä–æ–¥":
        direction = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", list(intercity_data.keys()))
        weight_tonn = st.number_input("–í–µ—Å (—Ç–æ–Ω–Ω)", min_value=0.0, step=0.1, value=0.0)

        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
            if weight_tonn <= 0:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞!")
            else:
                tariff = intercity_data[direction]
                capacity = 20  # –î–æ–ø—É—Å—Ç–∏–º, —Ñ—É—Ä–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å –¥–æ 20 —Ç–æ–Ω–Ω
                coef = 2       # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≥—Ä—É–∑–∞
                cost = (tariff / capacity) * weight_tonn * coef
                st.success(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏: **{round(cost)} —Ç–≥**")


###############################################################################
#                 –ë–õ–û–ö 2: –ö–û–î –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò (–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å)
###############################################################################
def get_line_count(pdf, width, text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã.
    """
    lines = text.split("\n")
    count = 0
    for line in lines:
        if not line:
            count += 1
        else:
            count += math.ceil(pdf.get_string_width(line) / width)
    return count

def format_date_russian(date_obj):
    months = {
        "January": "–Ø–Ω–≤–∞—Ä—è", "February": "–§–µ–≤—Ä–∞–ª—è", "March": "–ú–∞—Ä—Ç–∞",
        "April": "–ê–ø—Ä–µ–ª—è",  "May": "–ú–∞—è",      "June": "–ò—é–Ω—è",
        "July": "–ò—é–ª—è",     "August": "–ê–≤–≥—É—Å—Ç–∞","September": "–°–µ–Ω—Ç—è–±—Ä—è",
        "October": "–û–∫—Ç—è–±—Ä—è","November": "–ù–æ—è–±—Ä—è","December": "–î–µ–∫–∞–±—Ä—è"
    }
    formatted = date_obj.strftime("%d %B %Y –≥.")
    for eng, rus in months.items():
        formatted = formatted.replace(eng, rus)
    return formatted

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—á—ë—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Sheets
def get_next_invoice_number(spreadsheet_id, conn=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è Google Sheets –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞.
    –§–æ—Ä–º–∞—Ç: INV[–ì–æ–¥][–ù–æ–º–µ—Ä] (–Ω–∞–ø—Ä–∏–º–µ—Ä, INV2025001).
    """
    if conn is None:
        conn = connect_to_sheets()

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç InvoiceCounter (—Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        sheet = conn.open_by_key(spreadsheet_id)
        try:
            counter_sheet = sheet.worksheet("InvoiceCounter")
        except gspread.exceptions.WorksheetNotFound:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            counter_sheet = sheet.add_worksheet(title="InvoiceCounter", rows=2, cols=2)
            counter_sheet.update([["Year", "LastNumber"], [str(datetime.datetime.now().year), "0"]])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = counter_sheet.get_all_values()
        if not data or len(data) < 2:
            current_year = str(datetime.datetime.now().year)
            last_number = 0
            counter_sheet.update([["Year", "LastNumber"], [current_year, str(last_number)]])
        else:
            current_year = data[1][0]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —á–∏—Ç–∞–µ–º –≥–æ–¥ –∏–∑ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–¥–∞–Ω–Ω—ã–µ), –∞ –Ω–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            last_number = int(data[1][1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–µ–Ω–∏–ª—Å—è –ª–∏ –≥–æ–¥
        new_year = str(datetime.datetime.now().year)
        if new_year != current_year:
            last_number = 0
            counter_sheet.update_cell(2, 1, new_year)  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
            counter_sheet.update_cell(2, 2, str(last_number))

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        last_number += 1
        counter_sheet.update_cell(2, 2, str(last_number))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        return f"INV{new_year}{last_number:05d}"

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Å—á—ë—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –≤ get_next_invoice_number: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å timestamp
        return f"INV{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}-{uuid.uuid4().hex[:6]}"

def generate_invoice_gos(
    invoice_number,
    invoice_date,
    supplier_name,
    supplier_bin,
    supplier_address,
    supplier_bank_name,
    supplier_iik,
    supplier_bik,
    client_name,
    client_company,
    client_bin,
    client_phone,
    client_address,
    contract_number,
    df,
    total_logistics,
    kickback,
    tax_delivery,
    tax_kickback,
    tax_nds,
    net_margin,
):
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XX –ú–µ—Å—è—Ü YYYY –≥."
    invoice_date = format_date_russian(datetime.datetime.now())

    pdf = FPDF()
    pdf.add_page()

    # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ DejaVu)
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞–ø–∫–∞ assets –∏ –≤ –Ω–µ–π DejaVuSans.ttf, DejaVuSans-Bold.ttf
    try:
        font_path = os.path.join(os.path.dirname(__file__), "assets", "DejaVuSans.ttf")
        bold_font_path = os.path.join(os.path.dirname(__file__), "assets", "DejaVuSans-Bold.ttf")
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.add_font("DejaVu", "B", bold_font_path, uni=True)
        pdf.set_font("DejaVu", "", 9)
    except:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —à—Ä–∏—Ñ—Ç, –ø—É—Å—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç
        pdf.set_font("Arial", "", 9)

    attention_text = (
        "–í–Ω–∏–º–∞–Ω–∏–µ! –û–ø–ª–∞—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞. "
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. "
        "–¢–æ–≤–∞—Ä –æ—Ç–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ñ–∞–∫—Ç—É –ø—Ä–∏—Ö–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä/—Å –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º/–¥–æ—Å—Ç–∞–≤–∫–æ–π, "
        "–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—å."
    )
    pdf.multi_cell(0, 5, attention_text)
    pdf.ln(3)

    # –û–±—Ä–∞–∑–µ—Ü –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏—è
    pdf.set_font("DejaVu", "B", 9)
    pdf.cell(0, 5, "–û–±—Ä–∞–∑–µ—Ü –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏—è", ln=True, align="L")
    pdf.ln(2)
    pdf.set_font("DejaVu", "", 9)

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (–ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä, –ò–ò–ö, –ö–±–µ)
    start_x = pdf.get_x()
    start_y = pdf.get_y()
    w1, w2, w3 = 70, 65, 50
    line_height = 5
    txt1 = "–ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä:\n–¢–û–û ¬´–í–∞–π—Ç –ì—Ä—É–ø–ø¬ª\n–ë–ò–ù: 180840004745"
    pdf.multi_cell(w1, line_height, txt1, border=1, align="L")
    col1_end = pdf.get_y()
    pdf.set_xy(start_x + w1, start_y)
    txt2 = "–ò–ò–ö\nKZ06601A861052816001\n\n"
    pdf.multi_cell(w2, line_height, txt2, border=1, align="C")
    col2_end = pdf.get_y()
    pdf.set_xy(start_x + w1 + w2, start_y)
    txt3 = "–ö–±–µ\n17\n\n"
    pdf.multi_cell(w3, line_height, txt3, border=1, align="C")
    col3_end = pdf.get_y()
    row1_end = max(col1_end, col2_end, col3_end)
    pdf.set_xy(start_x, row1_end)

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
    start_x2 = pdf.get_x()
    start_y2 = pdf.get_y()
    txt4 = "–ë–∞–Ω–∫ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞:\n–ê–û ¬´–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞¬ª"
    pdf.multi_cell(w1, line_height, txt4, border=1, align="L")
    col1_end2 = pdf.get_y()
    pdf.set_xy(start_x2 + w1, start_y2)
    txt5 = "–ë–ò–ö\nHSBKKZKX"
    pdf.multi_cell(w2, line_height, txt5, border=1, align="C")
    col2_end2 = pdf.get_y()
    pdf.set_xy(start_x2 + w1 + w2, start_y2)
    txt6 = "–ö–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n710"
    pdf.multi_cell(w3, line_height, txt6, border=1, align="C")
    col3_end2 = pdf.get_y()
    row2_end = max(col1_end2, col2_end2, col3_end2)
    pdf.set_xy(start_x2, row2_end)

    pdf.ln(2)
    pdf.set_font("DejaVu", "B", 11)
    pdf.cell(0, 6, f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ {invoice_number} –æ—Ç {invoice_date}", ln=True, align="C")
    pdf.ln(2)
    pdf.set_draw_color(0, 0, 0)
    pdf.set_line_width(0.8)
    current_y = pdf.get_y()
    pdf.line(10, current_y, 200, current_y)
    pdf.ln(4)

    pdf.set_font("DejaVu", "", 9)
    pdf.cell(0, 5, f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}, –ë–ò–ù {supplier_bin}, {supplier_address}", ln=True)
    pdf.ln(2)
    pdf.cell(0, 5, f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {client_company}, –ë–ò–ù: {client_bin}, –¢–µ–ª: {client_phone}", ln=True)
    pdf.ln(2)
    if contract_number:
        contract_text = f"–î–æ–≥–æ–≤–æ—Ä: {contract_number}"
    else:
        contract_text = "–î–æ–≥–æ–≤–æ—Ä: –ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞"
    pdf.cell(0, 5, contract_text, ln=True)
    pdf.ln(2)

    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    pdf.set_draw_color(0, 0, 0)
    pdf.set_line_width(0.2)
    pdf.set_font("DejaVu", "B", 9)
    pdf.cell(10, 8, "‚Ññ", 1, align="C")
    pdf.cell(25, 8, "–ö–æ–¥", 1, align="C")
    pdf.cell(60, 8, "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 1)
    pdf.cell(25, 8, "–ö–æ–ª-–≤–æ", 1, align="C")
    pdf.cell(15, 8, "–ï–¥.", 1, align="C")
    pdf.cell(25, 8, "–¶–µ–Ω–∞", 1, align="C")
    pdf.cell(25, 8, "–°—É–º–º–∞", 1, align="C")
    pdf.ln()
    pdf.set_font("DejaVu", "", 9)

    total_sum = 0
    row_line_height = 8
    for idx, row in df.iterrows():
        product_text = str(row["–¢–æ–≤–∞—Ä"])
        num_lines = get_line_count(pdf, 60, product_text)
        cell_height = num_lines * row_line_height
        start_x = pdf.get_x()
        start_y = pdf.get_y()

        pdf.cell(10, cell_height, str(idx + 1), border=1, align="C")
        pdf.cell(25, cell_height, "", border=1, align="C")  # –ü–æ–¥ "–ö–æ–¥" (–ø—É—Å—Ç–æ)
        
        x_product = pdf.get_x()
        y_product = pdf.get_y()
        pdf.multi_cell(60, row_line_height, product_text, border=1)
        pdf.set_xy(x_product + 60, start_y)

        pdf.cell(25, cell_height, str(row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]), border=1, align="C")
        pdf.cell(15, cell_height, str(row["–ï–¥_–∏–∑–º–µ—Ä–µ–Ω–∏—è"]), border=1, align="C")
        pdf.cell(25, cell_height, f"{int(row['–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞']):,}‚Ç∏", border=1, align="R")
        pdf.cell(25, cell_height, f"{int(row['–í—ã—Ä—É—á–∫–∞']):,}‚Ç∏", border=1, align="R")
        pdf.ln(cell_height)
        total_sum += row["–í—ã—Ä—É—á–∫–∞"]

    pdf.cell(185, 8, f"–ò—Ç–æ–≥–æ: {int(total_sum):,}‚Ç∏", 0, ln=True, align="R")
    pdf.ln(2)

    total_revenue_pdf = df["–í—ã—Ä—É—á–∫–∞"].sum()
    nds_calculated = total_revenue_pdf * 12 / 112
    pdf.cell(185, 8, f"–í —Ç–æ–º —á–∏—Å–ª–µ –ù–î–°: {int(nds_calculated):,}‚Ç∏", 0, ln=True, align="R")
    pdf.ln(2)

    total_items = len(df)
    pdf.cell(0, 5, f"–í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π {total_items}, –Ω–∞ —Å—É–º–º—É {int(total_sum):,} —Ç–µ–Ω–≥–µ", ln=True)
    pdf.ln(2)
    sum_words = num2words(int(total_sum), lang="ru").capitalize() + " —Ç–µ–Ω–≥–µ 00 —Ç–∏—ã–Ω"
    pdf.cell(0, 5, f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {sum_words}", ln=True)
    pdf.ln(2)

    current_y = pdf.get_y()
    pdf.line(10, current_y, 200, current_y)
    pdf.ln(4)
    pdf.ln(2)

    pdf.set_font("DejaVu", "", 8)
    pdf.multi_cell(
        0,
        4,
        (
            "–°–ß–ï–¢ –î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù –í –¢–ï–ß–ï–ù–ò–ò 3-–• –ë–ê–ù–ö–û–í–°–ö–ò–• –î–ù–ï–ô.\n"
            "–ü–û –ò–°–¢–ï–ß–ï–ù–ò–ò –£–ö–ê–ó–ê–ù–ù–û–ì–û –°–†–û–ö–ê –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞.\n"
            "–ü–†–ò –ü–û–ö–£–ü–ö–ï –ë/–£ –¢–†–£–ë, –¢–û–í–ê–† –í–û–ó–í–†–ê–¢–£ –ù–ï –ü–û–î–õ–ï–ñ–ò–¢."
        ),
    )
    pdf.ln(5)
    pdf.set_font("DejaVu", "", 9)
    pdf.cell(30, 5, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ü—É–ª–∏–∫ –ó.–í.", ln=False)
    pdf.cell(60, 5, "_______", ln=True)
    y_sign = pdf.get_y()
    pdf.ln(5)

    # –ü—Ä–∏–º–µ—Ä: –≤—Å—Ç–∞–≤–∫–∞ –ø–µ—á–∞—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –ø–∞–ø–∫–∏ assets
    stamp_path = os.path.join(os.path.dirname(__file__), "assets", "stamp.PNG")
    signature_path = os.path.join(os.path.dirname(__file__), "assets", "signature.png")

    try:
        pdf.image(stamp_path, x=100, y=y_sign - 10, w=50) # w- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—á–∞—Ç–∏:", e)
    try:
        pdf.image(signature_path, x=40, y=y_sign - 10, w=20) # w- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∏:", e)

    os.makedirs("output", exist_ok=True)
    pdf_path = os.path.join("output", "invoice_gos_full.pdf")
    pdf.output(pdf_path, "F")
    return pdf_path

def run_margin_service():
    # CSS –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ ¬´–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏¬ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º –≤ Python)
    st.markdown(
        """
        <style>
        /* –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –∏ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è markdown-–º–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
        .block-container p {
            margin: 0.3rem 0 0.2rem 0 !important;
            font-size: 16px !important;
            line-height: 1.2 !important;
        }
        /* –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –∏ —à—Ä–∏—Ñ—Ç –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ */
        div[data-testid="stNumberInput"] input,
        div[data-testid="stTextInput"] input {
             min-height: 35px !important;
             padding: 4px 6px !important;
             font-size: 14px !important;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
        div.stButton > button {
             background-color: #656dff;
             color: #FFFFFF;
             border: none;
             border-radius: 4px;
             padding: 2px 8px;
             font-size: 6px;
             cursor: pointer;
             transition: background-color 0.3s ease;
        }
        div.stButton > button:hover {
             background-color: #94db00;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # –ù–û–í–û–ï: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π spreadsheet_id –¥–ª—è –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã (–¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å—á—ë—Ç–æ–≤)
    spreadsheet_id = "1Z4-Moti7RVqyBQY5v4tcCwFQS3noOD84w9Q2liv9rI4"

    # --- –ë–ª–æ–∫ "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö; –∏–Ω–∞—á–µ ‚Äî –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    client_name = st.session_state.get('client_name', '')
    client_company = st.session_state.get('client_company', '')
    client_bin = st.session_state.get('client_bin', '')
    client_phone = st.session_state.get('client_phone', '')
    client_address = st.session_state.get('client_address', '')
    client_contract = st.session_state.get('client_contract', '')
    total_logistics = st.session_state.get('total_logistics', 0)
    kickback = st.session_state.get('kickback', 0)
    if "products" not in st.session_state:
        st.session_state.products = []

    with st.expander("üìå –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"):
        col1, col2 = st.columns(2)
        with col1:
            client_name = st.text_input("–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞", value=client_name)
            client_company = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", value=client_company)
            client_bin = st.text_input("–ë–ò–ù –∫–ª–∏–µ–Ω—Ç–∞", value=client_bin)
        with col2:
            client_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", value=client_phone)
            client_address = st.text_input("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", value=client_address)
            client_contract = st.text_input("–î–æ–≥–æ–≤–æ—Ä (‚Ññ)", placeholder="–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞", value=client_contract)

    # --- –ë–ª–æ–∫ "–î–∞–Ω–Ω—ã–µ –ø–æ —Å–¥–µ–ª–∫–µ"
    with st.expander("üìå –î–∞–Ω–Ω—ã–µ –ø–æ —Å–¥–µ–ª–∫–µ"):
        col1, col2 = st.columns(2)
        with col1:
            total_logistics = st.number_input("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (‚Ç∏)", min_value=0, value=total_logistics, format="%d")
        with col2:
            kickback = st.number_input("–û—Ç–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç—É (‚Ç∏)", min_value=0, value=kickback, format="%d")

    # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    if "products" not in st.session_state:
        st.session_state.products = []

    # --- –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    st.subheader("üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
    with st.form("add_product_form"):
        col_left, col_right = st.columns(2)
        with col_left:
            st.markdown("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", key="name", label_visibility="collapsed")
            st.markdown("–ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è")
            unit = st.selectbox("–ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è", ["—à—Ç", "–º", "–∫–≥", "–∫–º", "–±—É—Ö—Ç–∞", "—Ä—É–ª–æ–Ω", "–º¬≤", "—Ç–æ–Ω–Ω–∞"], 
                                key="unit", label_visibility="collapsed")
            st.markdown("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=1, key="quantity", label_visibility="collapsed")
            st.markdown("–í–µ—Å (–∫–≥)")
            weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=0, value=0, format="%d", key="weight", label_visibility="collapsed")

        with col_right:
            # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1
            row1_col1, row1_col2 = st.columns(2)
            with row1_col1:
                st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1 (‚Ç∏)</p>', unsafe_allow_html=True)
                price1 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1 (‚Ç∏)", min_value=0, value=0, format="%d", key="price_1", label_visibility="collapsed")
            with row1_col2:
                st.markdown("‚†Ä")
                comment1 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key="comm_1", label_visibility="collapsed")

            # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2
            row2_col1, row2_col2 = st.columns(2)
            with row2_col1:
                st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2 (‚Ç∏)</p>', unsafe_allow_html=True)
                price2 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2 (‚Ç∏)", min_value=0, value=0, format="%d", key="price_2", label_visibility="collapsed")
            with row2_col2:
                st.markdown("‚†Ä")
                comment2 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key="comm_2", label_visibility="collapsed")

            # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3
            row3_col1, row3_col2 = st.columns(2)
            with row3_col1:
                st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3 (‚Ç∏)</p>', unsafe_allow_html=True)
                price3 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3 (‚Ç∏)", min_value=0, value=0, format="%d", key="price_3", label_visibility="collapsed")
            with row3_col2:
                st.markdown("‚†Ä")
                comment3 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key="comm_3", label_visibility="collapsed")

            # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4
            row4_col1, row4_col2 = st.columns(2)
            with row4_col1:
                st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4 (‚Ç∏)</p>', unsafe_allow_html=True)
                price4 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4 (‚Ç∏)", min_value=0, value=0, format="%d", key="price_4", label_visibility="collapsed")
            with row4_col2:
                st.markdown("‚†Ä")
                comment4 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key="comm_4", label_visibility="collapsed")

            # –ù–∞—Ü–µ–Ω–∫–∞
            row5_col1, _, _ = st.columns([2,1,2])
            with row5_col1:
                st.markdown("–ù–∞—Ü–µ–Ω–∫–∞ (%)")
                markup = st.number_input("–ù–∞—Ü–µ–Ω–∫–∞ (%)", min_value=0, value=20, format="%d", key="markup", label_visibility="collapsed")

        submit_btn = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")

    if submit_btn:
        if st.session_state.name.strip():
            st.session_state.products.append({
                "–¢–æ–≤–∞—Ä": st.session_state.name,
                "–ï–¥_–∏–∑–º–µ—Ä–µ–Ω–∏—è": st.session_state.unit,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.session_state.quantity,
                "–í–µ—Å (–∫–≥)": st.session_state.weight,
                "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1": st.session_state.price_1,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1": st.session_state.comm_1,
                "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2": st.session_state.price_2,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2": st.session_state.comm_2,
                "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3": st.session_state.price_3,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3": st.session_state.comm_3,
                "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4": st.session_state.price_4,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4": st.session_state.comm_4,
                "–ù–∞—Ü–µ–Ω–∫–∞ (%)": st.session_state.markup,
            })
            st.rerun()
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚ö†Ô∏è ")

    # --- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
    st.subheader("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    if not st.session_state.products:
        st.info("–¢–æ–≤–∞—Ä—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã‚ùó")
    else:
        for index, product in enumerate(st.session_state.products):
            supplier_prices = [
                p for p in [
                    product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1"],
                    product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2"],
                    product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3"],
                    product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4"],
                ] if p > 0
            ]
            min_supplier_price = min(supplier_prices, default=0)
            max_supplier_price = max(supplier_prices, default=0)
            price_for_client = min_supplier_price * (1 + product["–ù–∞—Ü–µ–Ω–∫–∞ (%)"] / 100)
            revenue = price_for_client * product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            cost_price = min_supplier_price * product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            margin = revenue - cost_price

            with st.expander(f"üõí {product['–¢–æ–≤–∞—Ä']} ({product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} {product['–ï–¥_–∏–∑–º–µ—Ä–µ–Ω–∏—è']})"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Ç–æ–≥–æ):** {int(revenue):,} ‚Ç∏")
                    st.write(f"**–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:** {int(cost_price):,} ‚Ç∏")
                    st.write(f"**–ù–∞—à–∞ –º–∞—Ä–∂–∞:** {int(margin):,} ‚Ç∏")
                    st.write(f"**–ù–∞—Ü–µ–Ω–∫–∞:** {product['–ù–∞—Ü–µ–Ω–∫–∞ (%)']}%")
                with col2:
                    st.write(f"**–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–º–∏–Ω ‚Äì –º–∞–∫—Å):** {int(min_supplier_price):,} ‚Äì {int(max_supplier_price):,} ‚Ç∏")
                    st.write(f"**–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞ –µ–¥.):** {int(price_for_client):,} ‚Ç∏")
                
                # –ö–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "–£–¥–∞–ª–∏—Ç—å" —Å –≤–∏–¥–∏–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ _X, –Ω–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ key
                col_btn, _ = st.columns([1, 1])
                with col_btn:
                    if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_product_{index}"):
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                        st.session_state.edit_index = index
                        st.session_state.edit_product = product.copy()
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ cancel_key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                        if "cancel_key" not in st.session_state:
                            st.session_state.cancel_key = f"cancel_edit_{index}"
                        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞': {st.session_state.cancel_key}")
                        st.rerun()

                    if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_product_{index}"):
                        st.session_state.products.pop(index)
                        st.rerun()

    # --- –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if "edit_index" in st.session_state and "edit_product" in st.session_state:
        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–µ–¥–µ–º —Ç–µ–∫—É—â–∏–π edit_index
        print(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–æ–≤–∞—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º: {st.session_state.edit_index}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edit_index –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if st.session_state.edit_index < 0 or st.session_state.edit_index >= len(st.session_state.get("products", [])):
            st.error("–û—à–∏–±–∫–∞: –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            if "edit_index" in st.session_state:
                del st.session_state.edit_index
            if "edit_product" in st.session_state:
                del st.session_state.edit_product
            if "cancel_key" in st.session_state:
                del st.session_state.cancel_key
            st.rerun()

        st.subheader("üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–æ—Ä–º—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ edit_index
        form_key = f"edit_product_form_{st.session_state.edit_index}"
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {form_key}")
        with st.form(form_key):
            col_left, col_right = st.columns(2)
            with col_left:
                name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", value=st.session_state.edit_product["–¢–æ–≤–∞—Ä"], key=f"edit_name_{st.session_state.edit_index}")
                unit = st.selectbox("–ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è", ["—à—Ç", "–º", "–∫–≥", "–∫–º", "–±—É—Ö—Ç–∞", "—Ä—É–ª–æ–Ω", "–º¬≤", "—Ç–æ–Ω–Ω–∞"], 
                                    index=["—à—Ç", "–º", "–∫–≥", "–∫–º", "–±—É—Ö—Ç–∞", "—Ä—É–ª–æ–Ω", "–º¬≤", "—Ç–æ–Ω–Ω–∞"].index(st.session_state.edit_product["–ï–¥_–∏–∑–º–µ—Ä–µ–Ω–∏—è"]),
                                    key=f"edit_unit_{st.session_state.edit_index}")
                quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=int(st.session_state.edit_product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]), key=f"edit_quantity_{st.session_state.edit_index}")
                weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=0, value=int(st.session_state.edit_product["–í–µ—Å (–∫–≥)"]), format="%d", key=f"edit_weight_{st.session_state.edit_index}")

            with col_right:
                # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1
                row1_col1, row1_col2 = st.columns(2)
                with row1_col1:
                    st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1 (‚Ç∏)</p>', unsafe_allow_html=True)
                    price1 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1", min_value=0, value=int(st.session_state.edit_product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1"]), format="%d", key=f"edit_price_1_{st.session_state.edit_index}", label_visibility="collapsed")
                with row1_col2:
                    st.markdown("‚†Ä")
                    comment1 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=st.session_state.edit_product["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1"], key=f"edit_comm_1_{st.session_state.edit_index}", label_visibility="collapsed")

                # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2
                row2_col1, row2_col2 = st.columns(2)
                with row2_col1:
                    st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2 (‚Ç∏)</p>', unsafe_allow_html=True)
                    price2 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2", min_value=0, value=int(st.session_state.edit_product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2"]), format="%d", key=f"edit_price_2_{st.session_state.edit_index}", label_visibility="collapsed")
                with row2_col2:
                    st.markdown("‚†Ä")
                    comment2 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=st.session_state.edit_product["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2"], key=f"edit_comm_2_{st.session_state.edit_index}", label_visibility="collapsed")

                # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3
                row3_col1, row3_col2 = st.columns(2)
                with row3_col1:
                    st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3 (‚Ç∏)</p>', unsafe_allow_html=True)
                    price3 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3", min_value=0, value=int(st.session_state.edit_product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3"]), format="%d", key=f"edit_price_3_{st.session_state.edit_index}", label_visibility="collapsed")
                with row3_col2:
                    st.markdown("‚†Ä")
                    comment3 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=st.session_state.edit_product["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3"], key=f"edit_comm_3_{st.session_state.edit_index}", label_visibility="collapsed")

                # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4
                row4_col1, row4_col2 = st.columns(2)
                with row4_col1:
                    st.markdown('<p style="font-size:16px; margin-bottom:0px;">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4 (‚Ç∏)</p>', unsafe_allow_html=True)
                    price4 = st.number_input("–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4", min_value=0, value=int(st.session_state.edit_product["–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4"]), format="%d", key=f"edit_price_4_{st.session_state.edit_index}", label_visibility="collapsed")
                with row4_col2:
                    st.markdown("‚†Ä")
                    comment4 = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4", placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=st.session_state.edit_product["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4"], key=f"edit_comm_4_{st.session_state.edit_index}", label_visibility="collapsed")

                # –ù–∞—Ü–µ–Ω–∫–∞
                row5_col1, _, _ = st.columns([2,1,2])
                with row5_col1:
                    st.markdown("–ù–∞—Ü–µ–Ω–∫–∞ (%)")
                    markup = st.number_input("–ù–∞—Ü–µ–Ω–∫–∞ (%)", min_value=0, value=int(st.session_state.edit_product["–ù–∞—Ü–µ–Ω–∫–∞ (%)"]), format="%d", key=f"edit_markup_{st.session_state.edit_index}", label_visibility="collapsed")

            # –û—Ç–ª–∞–¥–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                print(f"–ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {st.session_state.edit_index}")
                print(f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: name={name}, unit={unit}, quantity={quantity}, weight={weight}, price1={price1}, price2={price2}, price3={price3}, price4={price4}, markup={markup}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
                if name.strip():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ st.session_state.products
                    st.session_state.products[st.session_state.edit_index] = {
                        "–¢–æ–≤–∞—Ä": name,
                        "–ï–¥_–∏–∑–º–µ—Ä–µ–Ω–∏—è": unit,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                        "–í–µ—Å (–∫–≥)": weight,
                        "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1": price1,
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1": comment1,
                        "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2": price2,
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2": comment2,
                        "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3": price3,
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3": comment3,
                        "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4": price4,
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4": comment4,
                        "–ù–∞—Ü–µ–Ω–∫–∞ (%)": markup,
                    }
                    del st.session_state.edit_index
                    del st.session_state.edit_product
                    if "cancel_key" in st.session_state:
                        del st.session_state.cancel_key
                    st.success("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
                    st.rerun()
                else:
                    st.error("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ —Å–µ—Å—Å–∏–∏
        if "cancel_key" in st.session_state:
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞': {st.session_state.cancel_key}")
            col_cancel, _ = st.columns([1, 1])  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
            with col_cancel:
                if st.button("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", key=st.session_state.cancel_key):
                    print(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞' –Ω–∞–∂–∞—Ç–∞ —Å –∫–ª—é—á–æ–º: {st.session_state.cancel_key}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edit_index –∏ edit_product —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    if "edit_index" in st.session_state:
                        del st.session_state.edit_index
                    if "edit_product" in st.session_state:
                        del st.session_state.edit_product
                    if "cancel_key" in st.session_state:
                        del st.session_state.cancel_key
                    st.rerun()
        else:
            # –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            st.session_state.cancel_key = f"cancel_edit_{st.session_state.edit_index}"
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞', —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {st.session_state.cancel_key}")
            col_cancel, _ = st.columns([1, 1])  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
            with col_cancel:
                if st.button("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", key=st.session_state.cancel_key):
                    print(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞' –Ω–∞–∂–∞—Ç–∞ —Å –∫–ª—é—á–æ–º: {st.session_state.cancel_key}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edit_index –∏ edit_product —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    if "edit_index" in st.session_state:
                        del st.session_state.edit_index
                    if "edit_product" in st.session_state:
                        del st.session_state.edit_product
                    if "cancel_key" in st.session_state:
                        del st.session_state.cancel_key
                    st.rerun()

    # –ù–û–íO–ï: –ë–ª–æ–∫ "–ê—Ä—Ö–∏–≤ —Ä–∞—Å—á–µ—Ç–æ–≤" –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–æ–º "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤" —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    with st.expander("üìú –ê—Ä—Ö–∏–≤ —Ä–∞—Å—á–µ—Ç–æ–≤", expanded=False):
        conn = connect_to_sheets()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        try:
            sheet = conn.open_by_key(spreadsheet_id)
        except gspread.exceptions.SpreadsheetNotFound:
            st.error("Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ spreadsheet_id –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á—ë—Ç–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ "History"
        history_sheet = sheet.worksheet("History")
        all_history = history_sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞
        one_month_ago = datetime.datetime.now() - datetime.timedelta(days=60)
        filtered_history = [
            row for row in all_history
            if datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S") > one_month_ago
        ]
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ (–º–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞): {len(filtered_history)}")  # –û—Ç–ª–∞–¥–∫–∞

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (CalculationDate) –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_history = sorted(filtered_history, key=lambda x: datetime.datetime.strptime(x[1], "%Y-%m-%d %H:%M:%S"), reverse=True)
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(sorted_history)}")  # –û—Ç–ª–∞–¥–∫–∞

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 300 –∑–∞–ø–∏—Å–µ–π
        limited_history = sorted_history[:300]
        print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 300 –∑–∞–ø–∏—Å–µ–π: {len(limited_history)}")  # –û—Ç–ª–∞–¥–∫–∞

        # –ü–æ–∏—Å–∫ –ø–æ client_name –∏ client_company
        search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏", "")
        if search_query:
            searched_history = [
                row for row in limited_history
                if search_query.lower() in row[2].lower() or search_query.lower() in row[3].lower()  # client_name (—Å—Ç–æ–ª–±–µ—Ü C), client_company (—Å—Ç–æ–ª–±–µ—Ü D)
            ]
            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ '{search_query}': {len(searched_history)}")  # –û—Ç–ª–∞–¥–∫–∞
        else:
            searched_history = limited_history

        if searched_history:
            deal_ids = [row[0] for row in searched_history if row and row[0].isdigit()]  # deal_id (—Å—Ç–æ–ª–±–µ—Ü A), —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not deal_ids:
                st.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö deal_id –≤ –∞—Ä—Ö–∏–≤–µ —Ä–∞—Å—á–µ—Ç–æ–≤.")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º format_func, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –§–ò–û, –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì",
                # —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏, –µ—Å–ª–∏ –§–ò–û –∏–ª–∏ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                def format_deal(deal_id):
                    for row in searched_history:
                        if row[0] == str(deal_id):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            client_name = row[2].strip() if len(row) > 2 and row[2] and row[2].lower() not in ["–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–∑–∞–≤–µ—Ä—à—ë–Ω"] else ""  # –§–ò–û (—Å—Ç–æ–ª–±–µ—Ü 3 –≤ History)
                            client_company = row[3].strip() if len(row) > 3 and row[3] and row[3].lower() not in ["–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–∑–∞–≤–µ—Ä—à—ë–Ω"] else ""  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü 4 –≤ History)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CalculationDate (—Å—Ç–æ–ª–±–µ—Ü 2 –≤ History) –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ "–î–î.–ú–ú.–ì–ì"
                            try:
                                date_str = row[1]  # –î–∞—Ç–∞ (—Å—Ç–æ–ª–±–µ—Ü 2 –≤ History)
                                if date_str.lower() in ["–∑–∞–≤–µ—Ä—à—ë–Ω", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"]:
                                    formatted_date = ""
                                else:
                                    date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                                    formatted_date = date_obj.strftime("%d.%m.%y")  # –§–æ—Ä–º–∞—Ç "–î–î.–ú–ú.–ì–ì"
                            except (ValueError, IndexError):
                                formatted_date = ""
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: "–§–ò–û, –ö–û–ú–ü–ê–ù–ò–Ø, –î–ê–¢–ê" —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                            return f"{client_name}, {client_company}, {formatted_date}".rstrip(", ")
                    return f"–†–∞—Å—á—ë—Ç #{deal_id} (–ù–µ –Ω–∞–π–¥–µ–Ω–æ)"

                selected_deal = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π —Ä–∞—Å—á—ë—Ç", deal_ids, format_func=format_deal)
                if st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ä—Ö–∏–≤"):
                    try:
                        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–µ–¥–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç load_calculation
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç —Å deal_id: {selected_deal}")
                        client_data_restored, deal_data_restored, products_restored = load_calculation(spreadsheet_id, int(selected_deal))
                        if client_data_restored:
                            client_name, client_company, client_bin, client_phone, client_address, client_contract = client_data_restored
                            total_logistics, kickback = deal_data_restored

                            # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–µ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                            print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {products_restored}")

                            st.session_state.client_name = client_name
                            st.session_state.client_company = client_company
                            st.session_state.client_bin = client_bin
                            st.session_state.client_phone = client_phone
                            st.session_state.client_address = client_address
                            st.session_state.client_contract = client_contract
                            st.session_state.total_logistics = int(total_logistics) if total_logistics else 0
                            st.session_state.kickback = int(kickback) if kickback else 0
                            st.session_state.products = products_restored if products_restored else []
                            st.success("–†–∞—Å—á—ë—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–†–∞—Å—á—ë—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—á—ë—Ç–∞: {e}")
                        print(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø—É—Å—Ç–∞.")

    # --- –ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª
    if st.button("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å"):
        if not st.session_state.products:
            st.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.")
        else:
            df = pd.DataFrame(st.session_state.products)
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω. —Ü–µ–Ω—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            df["–ú–∏–Ω. —Ü–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"] = df[
                [
                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 1",
                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 2",
                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 3",
                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ 4",
                ]
            ].replace(0, float("inf")).min(axis=1).replace(float("inf"), 0)

            # –¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –≤—ã—Ä—É—á–∫–∞, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø—Ä–∏–±—ã–ª—å (–º–∞—Ä–∂–∞)
            df["–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"] = df["–ú–∏–Ω. —Ü–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"] * (1 + df["–ù–∞—Ü–µ–Ω–∫–∞ (%)"] / 100)
            df["–í—ã—Ä—É—á–∫–∞"] = df["–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"] * df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"] = df["–ú–∏–Ω. —Ü–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"] * df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            df["–ü—Ä–∏–±—ã–ª—å"] = df["–í—ã—Ä—É—á–∫–∞"] - df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
            df["–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)"] = df["–ü—Ä–∏–±—ã–ª—å"] / df["–í—ã—Ä—É—á–∫–∞"] * 100

            # –†–∞—Å—Ö–æ–¥—ã
            tax_delivery = total_logistics * 0.15
            tax_kickback = kickback * 0.32
            tax_nds = df["–ü—Ä–∏–±—ã–ª—å"].sum() * 12 / 112  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ù–î–°
            net_margin = df["–ü—Ä–∏–±—ã–ª—å"].sum() - total_logistics - kickback - tax_delivery - tax_kickback - tax_nds

            manager_bonus = net_margin * 0.2

            st.subheader("üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{int(df['–í—ã—Ä—É—á–∫–∞'].sum()):,} ‚Ç∏")
                st.metric("üìä –ù–∞—à–∞ –º–∞—Ä–∂–∞ (–Ω–∞—Ü–µ–Ω–∫–∞)", f"{int(df['–ü—Ä–∏–±—ã–ª—å'].sum()):,} ‚Ç∏")
            with col2:
                st.metric("üí∞ –ß–∏—Å—Ç—ã–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", f"{int(net_margin):,} ‚Ç∏")
                st.metric("üèÜ –ë–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (20%)", f"{int(manager_bonus):,} ‚Ç∏")
            with col3:
                total_revenue = df["–í—ã—Ä—É—á–∫–∞"].sum()
                if math.isclose(total_revenue, 0, abs_tol=1e-9):
                    marz_percent = 0
                else:
                    marz_percent = net_margin / total_revenue * 100
                st.metric("üìà –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)", f"{max(0, marz_percent):.2f} %")

            st.write("### üõë –†–∞—Å—Ö–æ–¥—ã")
            st.text(f"üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {int(total_logistics):,} ‚Ç∏")
            st.text(f"üíµ –û—Ç–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç—É: {int(kickback):,} ‚Ç∏")
            st.text(f"üìä –ù–∞–ª–æ–≥ –Ω–∞ –æ–±–Ω–∞–ª (15%) (–ª–æ–≥–∏—Å—Ç–∏–∫–∞): {int(tax_delivery):,} ‚Ç∏")
            st.text(f"üí∏ –ù–∞–ª–æ–≥ –Ω–∞ –æ–±–Ω–∞–ª (32%) (–æ—Ç–∫–∞—Ç): {int(tax_kickback):,} ‚Ç∏")
            st.text(f"üìä –ù–∞–ª–æ–≥ –ù–î–° –æ—Ç –º–∞—Ä–∂–∏ (12%): {int(tax_nds):,} ‚Ç∏")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ò–û, –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –î–∞—Ç—ã
            current_date = datetime.datetime.now().strftime("%Y-%m-%d")
            if client_name and client_name.strip() and client_name.lower() != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
                file_name_base = client_name.strip()
                if client_company and client_company.strip() and client_company.lower() != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
                    file_name_base += f", {client_company.strip()}"
                file_name_base += f", {current_date}"
            else:
                file_name_base = current_date  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞, –µ—Å–ª–∏ –§–ò–û –∏–ª–∏ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                # –õ–∏—Å—Ç 1: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                client_data = pd.DataFrame({
                    "–ü–æ–ª–µ": ["–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", "–ë–ò–ù –∫–ª–∏–µ–Ω—Ç–∞", 
                             "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–î–æ–≥–æ–≤–æ—Ä (‚Ññ)"],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [client_name, client_company, client_bin, 
                                 client_phone, client_address, client_contract],
                })
                client_data.to_excel(writer, index=False, sheet_name="–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")

                # –õ–∏—Å—Ç 2: –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                deal_data = pd.DataFrame({
                    "–ü–æ–ª–µ": ["–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏", "–û—Ç–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç—É"],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ (‚Ç∏)": [total_logistics, kickback],
                })
                deal_data.to_excel(writer, index=False, sheet_name="–î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏")

                # –õ–∏—Å—Ç 3: —Ç–æ–≤–∞—Ä—ã
                df.to_excel(writer, index=False, sheet_name="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")

                # –õ–∏—Å—Ç 4: —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
                final_data = pd.DataFrame({
                    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                        "–í—ã—Ä—É—á–∫–∞",
                        "–ù–∞—à–∞ –º–∞—Ä–∂–∞ (–∏—Ç–æ–≥)",
                        "–ß–∏—Å—Ç—ã–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
                        "–ë–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (20%)",
                        "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                        "–û—Ç–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç—É",
                        "–ù–∞–ª–æ–≥ –Ω–∞ –æ–±–Ω–∞–ª (15%)",
                        "–ù–∞–ª–æ–≥ –Ω–∞ –æ–±–Ω–∞–ª (32%)",
                        "–ù–∞–ª–æ–≥ –ù–î–° (12%)",
                        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (net_margin)",
                    ],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ (‚Ç∏)": [
                        df["–í—ã—Ä—É—á–∫–∞"].sum(),
                        df["–ü—Ä–∏–±—ã–ª—å"].sum(),
                        net_margin,
                        manager_bonus,
                        total_logistics,
                        kickback,
                        tax_delivery,
                        tax_kickback,
                        tax_nds,
                        net_margin,
                    ],
                })
                final_data.to_excel(writer, index=False, sheet_name="–†–∞—Å—á–µ—Ç+–†–∞—Å—Ö–æ–¥—ã")

            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç –≤ Excel",
                data=output.getvalue(),
                file_name=f"{file_name_base}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—á—ë—Ç–∞
            conn = connect_to_sheets()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
            unique_invoice_number = get_next_invoice_number(spreadsheet_id, conn)
            pdf_path = generate_invoice_gos(
                invoice_number=unique_invoice_number,
                invoice_date="placeholder",
                supplier_name="–¢–û–û –í–∞–π—Ç –ì—Ä—É–ø–ø",
                supplier_bin="180840004745",
                supplier_address="–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ë–µ—Ä–µ–∑–æ–≤—Å–∫–æ–≥–æ 19",
                supplier_bank_name="–ê–û –ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
                supplier_iik="KZ06601A861052816001",
                supplier_bik="HSBKKZKX",
                client_name=client_name,
                client_company=client_company,
                client_bin=client_bin,
                client_phone=client_phone,
                client_address=client_address,
                contract_number=client_contract,
                df=df,
                total_logistics=total_logistics,
                kickback=kickback,
                tax_delivery=tax_delivery,
                tax_kickback=tax_kickback,
                tax_nds=tax_nds,
                net_margin=net_margin,
            )
            with open(pdf_path, "rb") as f:
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å —Å—á–µ—Ç (–≥–æ—Å)",
                    data=f,
                    file_name=f"{file_name_base}.pdf",
                    mime="application/pdf",
                )

            # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets (–¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å—á—ë—Ç–æ–≤)
            client_data = {
                'name': client_name,
                'company': client_company,
                'bin': client_bin,
                'phone': client_phone,
                'address': client_address,
                'contract': client_contract
            }
            deal_data = {
                'total_logistics': total_logistics,
                'kickback': kickback
            }
            try:
                deal_id = save_calculation(spreadsheet_id, client_data, deal_data, st.session_state.products, True)
                st.success(f"–†–∞—Å—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google Sheets —Å ID —Å–¥–µ–ª–∫–∏: {deal_id}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")

###############################################################################
#                     –û–°–ù–û–í–ù–û–ô –ë–õ–û–ö: –í–ö–õ–ê–î–ö–ò (TABS)
###############################################################################
tab_margin, tab_logistics, tab_suppliers = st.tabs(["**–†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏**", "**–†–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏**", "**–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤**"])

with tab_margin:
    run_margin_service()

with tab_logistics:
    run_logistics_service()

with tab_suppliers:
    run_supplier_search()  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ supplier_search.py

# --- –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º JS, –æ—Ç–∫–ª—é—á–∞—é—â–∏–π –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ---
st.markdown("""
<script>
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('input').forEach(function(el) {
    el.setAttribute('autocomplete', 'off');
    el.setAttribute('autocorrect', 'off');
    el.setAttribute('autocapitalize', 'off');
  });
});
</script>
""", unsafe_allow_html=True)
